import yaml
import jinja2
import pandas as pd

from pkg_resources import resource_string


def get_attr_info(key, convention, normalized):
    """Get information about the MMD fields.

    Input
    =====
    key: str
        MMD element to check
    convention: str
        e.g., acdd or acdd_ext
    normalized: dict
        a normalized version of the mmd_elements dict (keys are, e.g.,
        'personnel>organisation>acdd' or
        'personnel>organisation>separator')

    Returns
    =======
    required: int
        if it is required
    repetition: str ('yes' or 'no')
        if repetition is allowed
    repetition_str: str
        a longer string representation for use in the DMH (basically
        a comment)
    separator: str
        sign for separating elements that can be repeated (e.g., ','
        or ';')
    default:
        a default value elements that are required but missing in the
        netcdf file
    """
    max_occurs_key = key.replace(convention, 'maxOccurs')
    if max_occurs_key in normalized.keys():
        max_occurs = normalized[max_occurs_key]
    else:
        max_occurs = ''
    repetition_allowed = 'yes' if max_occurs not in ['0', '1'] else 'no'
    min_occurs_key = key.replace(convention, 'minOccurs')
    if min_occurs_key in normalized.keys():
        required = int(normalized[min_occurs_key])
    else:
        required = 0
    separator_key = key.replace(convention, 'separator')
    if separator_key in normalized.keys():
        separator = normalized[separator_key]
    else:
        separator = ''
    default_key = key.replace(convention, 'default')
    if default_key in normalized.keys():
        default = normalized[default_key]
    else:
        default = ''
    repetition_key = key.replace(convention, 'repetition')
    if repetition_key in normalized.keys():
        repetition_str = normalized[repetition_key]
    else:
        repetition_str = ''
    return required, repetition_allowed, repetition_str, separator, default


def nc_attrs_from_yaml():
    """ToDo: Add docstring"""
    mmd_yaml = yaml.load(
        resource_string(
            globals()['__name__'].split('.')[0], 'mmd_elements.yaml'
        ), Loader=yaml.FullLoader
    )

    # Flatten dict
    df = pd.json_normalize(mmd_yaml, sep='>')
    normalized = df.to_dict(orient='records')[0]

    attributes = {}
    attributes['message'] = (
        'This file is autogenerated from\n'
        'https://github.com/metno/py-mmd-tools/blob/master/py_mmd_tools/mmd_elements.yaml\n'
        '\n'
        'Please do not update this file manually. The yaml file is used\n'
        'as the authoritative source. If any translations from ACDD to\n'
        'MMD should be changed, the changes should be made in that file.\n'
    )
    attributes['acdd_ext'] = []
    attributes['acdd'] = {}
    attributes['acdd']['required'] = []
    attributes['acdd']['not_required'] = []
    for key, val in normalized.items():
        if key.endswith('acdd'):
            required, repetition_allowed, repetition_str, separator, default = get_attr_info(
                key, 'acdd', normalized
            )
            if required:
                attributes['acdd']['required'].append({
                    'mmd_field': key.replace('>acdd', ''),
                    'attribute': val,
                    'repetition_allowed': repetition_allowed,
                    'repetition_str': repetition_str,
                    'separator': separator,
                    'default': default,
                })
            else:
                attributes['acdd']['not_required'].append({
                    'mmd_field': key.replace('>acdd', ''),
                    'attribute': val,
                    'repetition_allowed': repetition_allowed,
                    'repetition_str': repetition_str,
                    'separator': separator,
                    'default': default,
                })
        if key.endswith('acdd_ext'):
            required, repetition_allowed, repetition_str, separator, default = get_attr_info(
                key, 'acdd_ext', normalized
            )
            attributes['acdd_ext'].append({
                'mmd_field': key.replace('>acdd_ext', ''),
                'attribute': val,
                'repetition_allowed': repetition_allowed,
                'repetition_str': repetition_str,
                'separator': separator,
                'default': default,
            })

    def is_list(value):
        return isinstance(value, list)

    env = jinja2.Environment(
        loader=jinja2.PackageLoader(globals()['__name__'].split('.')[0], 'templates'),
        autoescape=jinja2.select_autoescape(['html', 'xml']),
        trim_blocks=True, lstrip_blocks=True
    )
    env.filters['is_list'] = is_list
    template = env.get_template('nc_attributes_template.adoc')

    out_doc = template.render(data=attributes)

    return out_doc
